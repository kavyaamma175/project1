!pip install yfinance --upgrade --no-cache-dir
import pandas as pd
import numpy as np
import yfinance as yf
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import LSTM, Dense
from sklearn.metrics import mean_squared_error
# Fetch data
stock_data = yf.download('AAPL', start='2010-01-01', end='2023-02-26')
print(stock_data)
# Convert to dataframe
df = pd.DataFrame(stock_data)
# df=pd.DataFrame({"x":np.linspace(0,10,100),"y":np.sin(np.linspace(0,10,100))}) # This line was causing the error, it reassigned df
# Plot closing prices
plt.figure(figsize=(10, 6))
plt.plot(df['Close'])
plt.title('AAPL Closing Prices')
plt.xlabel('Date')
plt.ylabel('Price')
plt.show()
scaler = MinMaxScaler(feature_range=(0, 1))
# Fit the scaler to the 'Close' prices and transform the data
scaled_data = scaler.fit_transform(df[['Close']]) #Scale the 'Close' column

# Create training and testing data
train_size = int(len(scaled_data) * 0.8)
train_data = scaled_data[:train_size]
test_data = scaled_data[train_size:]

# Function to create sequences
def create_sequences(data, seq_len):
    X, y = [], []
    for i in range(len(data) - seq_len):
        X.append(data[i:i + seq_len, 0])
        y.append(data[i + seq_len, 0])
    return np.array(X), np.array(y)

# Create sequences
seq_len = 1 # Reduce the sequence length for the limited dataset, or increase dataset
X_train, y_train = create_sequences(train_data, seq_len)
X_test, y_test = create_sequences(test_data, seq_len)

# Reshape data for LSTM
#Check if X_train and X_test are empty before reshaping
if X_train.size > 0 and X_test.size > 0:
  X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)
  X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)

  # Define the LSTM model (This was missing in the original code)
  model = Sequential()
  model.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1)))
  model.add(LSTM(units=50))
  model.add(Dense(1))
  model.compile(loss='mean_squared_error', optimizer='adam')

  # Train model
  model.fit(X_train, y_train, epochs=50, batch_size=32, verbose=2)
  # Make predictions
  predictions = model.predict(X_test)

  # Evaluate model
  mse = mean_squared_error(y_test, predictions)
  rmse = np.sqrt(mse)
  print(f'RMSE: {rmse:.2f}')

  # Plot predictions
  plt.figure(figsize=(10, 6))
  plt.plot(y_test, label='Actual')
  plt.plot(predictions, label='Predicted')
  plt.title('AAPL Closing Prices')
  plt.xlabel('Date')
  plt.ylabel('Price')
  plt.legend()
  plt.show()
else:
  print("Not enough data to train the model. Increase the date range or reduce seq_len.")
  plt.show()
